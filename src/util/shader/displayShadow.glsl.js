export default "// Only display shadow\r\n\r\n@export ecgl.displayShadow.vertex\r\n\r\n@import ecgl.common.transformUniforms\r\n\r\n@import ecgl.common.uv.header\r\n\r\n@import ecgl.common.attributes\r\n\r\nvarying vec3 v_WorldPosition;\r\n\r\nvarying vec3 v_Normal;\r\n\r\nvoid main()\r\n{\r\n @import ecgl.common.uv.main\r\n v_Normal = normalize((worldInverseTranspose * vec4(normal, 0.0)).xyz);\r\n\r\n v_WorldPosition = (world * vec4(position, 1.0)).xyz;\r\n gl_Position = worldViewProjection * vec4(position, 1.0);\r\n}\r\n\r\n@end\r\n\r\n\r\n@export ecgl.displayShadow.fragment\r\n\r\n@import ecgl.common.uv.fragmentHeader\r\n\r\nvarying vec3 v_Normal;\r\nvarying vec3 v_WorldPosition;\r\n\r\n// For reflection.\r\nuniform float roughness: 0.2;\r\n\r\n#ifdef DIRECTIONAL_LIGHT_COUNT\r\n@import clay.header.directional_light\r\n#endif\r\n\r\n@import ecgl.common.ssaoMap.header\r\n\r\n@import clay.plugin.compute_shadow_map\r\n\r\nvoid main()\r\n{\r\n float shadow = 1.0;\r\n\r\n @import ecgl.common.ssaoMap.main\r\n\r\n#if defined(DIRECTIONAL_LIGHT_COUNT) && defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\r\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\r\n if(shadowEnabled)\r\n {\r\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\r\n }\r\n for (int i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++) {\r\n shadow = min(shadow, shadowContribsDir[i] * 0.5 + 0.5);\r\n }\r\n#endif\r\n\r\n shadow *= 0.5 + ao * 0.5;\r\n shadow = clamp(shadow, 0.0, 1.0);\r\n\r\n gl_FragColor = vec4(vec3(0.0), 1.0 - shadow);\r\n}\r\n\r\n@end";
